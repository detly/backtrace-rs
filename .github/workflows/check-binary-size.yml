# This workflow checks if a PR commit has changed the size of a hello world Rust program.
# It downloads Rustc and compiles two versions of a stage0 compiler - one using the base commit
# of the PR, and one using the latest commit in the PR.
# If the size of the hello world program has changed, it posts a comment to the PR.
name: Check binary size

on:
  pull_request_target:
    branches:
      - master

jobs:
  test:
    name: Check binary size
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      # This cannot be used as a context variable in the 'uses' key later. If it
      # changes, update those steps too.
      BACKTRACE_DIR: backtrace
      RUSTC_DIR: rustc
      TEST_MAIN_RS: foo.rs
      BASE_COMMIT: ${{ github.event.pull_request.base.sha }}
      HEAD_COMMIT: ${{ github.event.pull_request.head.sha }}
    steps:
      - name: Print info
        run: |
          echo "Current SHA: $HEAD_COMMIT"
          echo "Base SHA: $BASE_COMMIT"
      # Note: the backtrace source that's cloned here is NOT the version to be
      # patched in to std. It's cloned here to access the Github action for
      # building the test binary and measuring its size.
      - name: Clone backtrace to access Github action
        uses: actions/checkout@v3
        with:
          path: ${{ env.BACKTRACE_DIR }}
      - name: Clone Rustc
        uses: actions/checkout@v3
        with:
          repository: rust-lang/rust
          path: ${{ env.RUSTC_DIR }}
      - name: Set up std repository and backtrace submodule for size test
        working-directory: ${{ env.RUSTC_DIR }}
        run: |
          # Bootstrap config
          cat <<EOF > config.toml
          [llvm]
          download-ci-llvm = true
          [rust]
          incremental = false
          EOF

          # Test program source
          cat <<EOF > $TEST_MAIN_RS
          fn main() {
            panic!();
          }
          EOF

          git submodule update --init library/backtrace

          cd library/backtrace
          git remote add head-pr https://github.com/${{ github.event.pull_request.head.repo.full_name }} && \
          git fetch --all
      - name: Compile binary with base version of backtrace
        uses: ./backtrace/.github/actions/build-with-patched-std
        with:
          backtrace-commit: $BASE_COMMIT
          main-rs: ${{ env.TEST_MAIN_RS }}
          rustc-dir: ${{ env.RUSTC_DIR }}
        id: size-reference
      - name: Compile binary with PR version of backtrace
        uses: ./backtrace/.github/actions/build-with-patched-std
        with:
          backtrace-commit: $HEAD_COMMIT
          main-rs: ${{ env.TEST_MAIN_RS }}
          rustc-dir: ${{ env.RUSTC_DIR }}
        id: size-updated
      - name: Post a PR comment if the size has changed
        uses: actions/github-script@v6
        env:
          SIZE_REFERENCE: ${{ steps.size-reference.outputs.test-binary-size }}
          SIZE_UPDATED: ${{ steps.size-updated.outputs.test-binary-size }}
        with:
          script: |
            const reference = process.env.SIZE_REFERENCE;
            const updated = process.env.SIZE_UPDATED;

            if (!(reference > 0)) {
              core.setFailed(`Reference size invalid: ${reference}`);
              return;
            }

            if (!(updated > 0)) {
              core.setFailed(`Updated size invalid: ${updated}`);
              return;
            }

            const diff = updated - reference;
            const plus = diff > 0 ? "+" : "";
            const diff_str = `${plus}${diff}B`;

            if (diff !== 0) {
              const percent = (((updated / reference) - 1) * 100).toFixed(2);
              // The body is created here and wrapped so "weirdly" to avoid whitespace at the start of the lines,
              // which is interpreted as a code block by Markdown.
              const body = `Below is the size of a hello-world Rust program linked with libstd with backtrace.

            Original binary size: **${reference}B**
            Updated binary size: **${updated}B**
            Difference: **${diff_str}** (${percent}%)`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              })
            }
